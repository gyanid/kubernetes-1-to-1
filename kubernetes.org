#+Title: Learning Kubernetes
#+Date: <2018-09-22 Sat>
#+Author: Yogesh Agrawal
#+Email: yogeshiiith@gmail.com

* Introduction
  Here will be learning kubernetes.

* Concepts
  - Kubernetes improves the development, delivery and maintenance of
    distributed applications.

  - Basics: pods, labels, annotations, services and replicasets.

  - Advanced: Daemon sets, jobs, configMaps, Secrets.
 
  - Deployments: lifecycly of a complete application.

  - Storage.

  - Based on three principles: immutability, declarative
    configurationm and online self healing systems.

  - Immutability: Once an artifact is created in the system it does
    not change via user modifications.

  - There are no incremental changes.

  - Immutable container images are at the core of everything that we
    will build in Kubernetes.

  - Everything in kubernetes is a declarative configuration object
    that represents the desired state of the system. It is kubernete's
    job to ensure that the actual state of the world matches the
    desired state.

  - Imperative defines actions, declarative defines state.

  - When it receives a desired state config, it does not take actions
    to make the current state match the desired state. It continuously
    takes actions to ensure that the curent state matches the desired
    state.

  - Combining three variable growth rates into a single growth rate
    reduces statistical noise and produces a more reliable forecast of
    expected growth.

  - Efficiency can be measured by the ratio of the useful work
    performed by machine or process to the total amount of energy
    spent doing so.

  - A dockerfile can be used to automate the creation of a Docker
    container image.

  - While designing a docker file, order your layers from least likely
    to change to most likely to change in order to optimize the image
    size for pushing and pulling.

* Kubernets Components
  #+BEGIN_SRC bash
$ kubectl get componentstatuses
NAME                 STATUS    MESSAGE              ERROR
controller-manager   Healthy   ok                   
scheduler            Healthy   ok                   
etcd-0               Healthy   {"health": "true"}
  #+END_SRC
** controller-manager
   It is responsible for running various controllers that regulate
   behavior in the cluster: for example, ensuring that all of the
   replicas of a service are available and healthy.

** scheduler
   The scheduler is responsible for placing different pods onto
   different nodes in the cluster.

** etcd server
   It is the storage for the cluster where all of the API objects are
   stored.

* Kubernetes Nodes
   #+BEGIN_SRC bash
   $ kubectl get nodes
NAME       STATUS    ROLES     AGE       VERSION
minikube   Ready     master    12d       v1.10.0
   #+END_SRC
 
   In Kubernetes nodes are separated into master nodes that containe
   containers like the API server, scheduler, etc., which manage the
   cluster, and worker nodes where your containers will
   run. Kubernetes won't generally schedule work onto master nodes to
   ensure that user workloads don't harm the overall operation of the
   cluster.

* Cluster Components
** Kubernetes Proxy
   The kubernetes proxy is responsible for routing network traffic to
   load-balanced services in the Kubernetes cluster. To do its job,
   the proxy must be present on every node in the cluster. Kubernetes
   has an API object named =DaemonSet=, which we will learn about
   later.
   #+BEGIN_SRC bash
$ kubectl get daemonSets --namespace=kube-system kube-proxy
NAME         DESIRED   CURRENT   READY     UP-TO-DATE   AVAILABLE   NODE SELECTOR   AGE
kube-proxy   1         1         1         1            1           <none>          12d
   #+END_SRC

* Kubectl commands
  #+BEGIN_SRC bash
  $ kubectl get componentstatuses
  $ kubectl get nodes
  $ kubectl describe nodes node-1
  $ kubectl get daemonSets --namespace=kube-system kube-proxy
  $ kubectl get pods --namespace=kube-system
  #+END_SRC

  #+BEGIN_SRC bash
  $ kubectl config current-context
  $ kubectl config use-context mas-qa/oshift-api-jfk3-qa-bamtech-co:8443/yagrawal
  $ kubectl config view
  $ kubectl -n razcp-dev get deployment razcp-hello-world-app-chart -o yaml
  $ kubectl get componentstatuses
  #+END_SRC

* References
  1. Kubernetes Up & Running book.
